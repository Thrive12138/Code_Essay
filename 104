/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0;
        } else {
            int leftlength = maxDepth(root.left);
            int rightlength = maxDepth(root.right);
            return Math.max(leftlength, rightlength) + 1;
        }
    }
}
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }
        Queue<TreeNode> use = new LinkedList<>();
        use.add(root);
        int ans = 0;
        while(!use.isEmpty()) {
            int size = use.size();
            while (size > 0) {
                TreeNode temp = use.remove();
                if(temp.left != null) {
                    use.add(temp.left);
                }
                if(temp.right != null) {
                    use.add(temp.right);
                }
                size--;
            }
            ans++;
        }
        return ans;
    }
}
