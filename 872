/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        Queue<TreeNode> r1 = new LinkedList<>();
        Queue<TreeNode> r2 = new LinkedList<>();
        look(root1, r1);
        look(root2, r2);
        if(r1.size() != r2.size()) {
            return false;
        }
        while(!r1.isEmpty()) {
            if(r1.remove().val != r2.remove().val) {
                return false;
            }
        }
        return true;
    }

    public void look(TreeNode node, Queue<TreeNode> r) {
        if(node.left == null && node.right == null) {
            r.add(node);
            return;
        }
        if(node.left != null) {
            look(node.left, r);
        }
        if(node.right != null) {
            look(node.right, r);
        }
    }
}
