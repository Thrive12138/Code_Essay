class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        Set<List> num = new HashSet<>();
        if(nums.length <= 3 || nums[0] > target / 4) return ans;
        int begin = 0;
        while(begin < nums.length - 3) {
            int end = begin + 1;
            while(end < nums.length - 2) {
                int left = end + 1;
                int right = nums.length - 1;
                while(left < right) {
                    if(nums[begin] + nums[end] + nums[left] + nums[right] == target) {
                        List<Integer> inAns = new ArrayList<>(Arrays.asList(nums[begin], nums[end], nums[left], nums[right]));
                        if(!num.contains(inAns)){
                            ans.add(new ArrayList<>(inAns));
                            num.add(inAns);
                        }
                        left++;
                        right--;
                        while(left < right && nums[left] == nums[left - 1]) {
                            left++;
                        }
                        while(left < right && nums[right] == nums[right + 1]) {
                            right--;
                        }
                    }else if(nums[begin] + nums[end] + nums[left] + nums[right] < target) {
                        left++;
                    }else {
                        right--;
                    }
                }
                end++;
            }
            begin++;
        }
        return ans;
    }
}
